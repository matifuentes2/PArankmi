<<<<<<< HEAD
con <- DBI::dbConnect(RPostgres::Postgres(), dbname = glue::glue("rankmi_global"), host=glue::glue("127.0.0.1"), port= glue::glue(5556), user= glue::glue("rankmi_database"), password= glue::glue("_R1nkm3D1t1b1s3_2019"))
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
"))
trash_surveys(base, "title") %>%
distinct(title) %>%
nrow()
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
base %>%
distinct(title) %>%
nrow()
dos <- base %>%
distinct(title) %>%
nrow()
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
"))
uno <- trash_surveys(base, "title") %>%
distinct(title) %>%
nrow()
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
"))
uno <- trash_surveys(base, "title") %>%
distinct(title)
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
dos <- base %>%
distinct(title)
dos %>%
filter(!title %in% uno$title)
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = "and length({var}) > 1 "
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and length({var}) > 1 ")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
output = glue::glue("and length({var}) > 2 ")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and length({var}) > 2 ")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} not '.'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} is not '.'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} != '.'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} != '     .'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and length({var}) > 1")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title)
dos %>%
filter(!title %in% uno$title) %>%
print()
dos %>%
filter(!title %in% uno$title) %>%
.[[1,1]]
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} <> '.'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos %>%
filter(!title %in% uno$title) %>%
.[[1,1]]
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} <> .")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and {var} <> '.'")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos <- base %>%
distinct(title)
dos %>%
filter(!title %in% uno$title) %>%
.[[1,1]]
dos %>%
filter(!title %in% uno$title)
trash_surveys <- function(df, var, query = F){
omisiones <-   c("zergey","marian","test","piloto","prueba","archivar","copia",
"eliminar","demo","toma de","no func","malo","dado de baja"
,"carolina","clima danna","clima jesus")
if(query == F){
output <- df %>%
filter(str_length(!!sym(var)) > 1) %>%
filter(!str_detect(!!sym(var), regex(paste(omisiones,collapse = "|"), ignore_case = T)))
}
else{
output = glue::glue("and length({var}) > 1")
for (i in 1:length(omisiones)){
output <- paste(output, glue::glue("and {var} not ilike '%{omisiones[[i]]}%'"))
}
}
return(output)
}
base <- DBI::dbGetQuery(con, glue::glue("select s.title
from survey_dimensions sd
left join dimensions d on d.id = sd.dimension_id
left join surveys s on s.id = sd.survey_id
left join enterprise_processes ep on ep.id = s.enterprise_process_id
left join dimension_levels dl on dl.dimension_id = d.id
where ep.rankmi_module_id = 3
and d.dimension_type = 'item'
and dl.evaluation_type_label_id is not null
and s.survey_type = 0
{trash_surveys(var = 's.title', query = T)}
"))
dos <- base %>%
distinct(title)
dos %>%
filter(!title %in% uno$title) %>%
.[[1,1]]
dos %>%
filter(!title %in% uno$title)
=======
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
filter(varname %in% t_gender$varname)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup(gender) %>%
summarise(mean(media))
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup() %>%
group_by(varname)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup() %>%
group_by(varname) %>%
summarise(media)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup() %>%
group_by(varname) %>%
summarise(mean(media))
?diff()
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup() %>%
group_by(varname) %>%
summarise(diff(media))
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value") %>%
group_by(gender, varname) %>%
summarise(media = mean(value, na.rm = T)) %>%
arrange(varname, gender) %>%
na.omit() %>%
filter(varname %in% t_gender$varname) %>%
ungroup() %>%
group_by(varname) %>%
summarise(diferencia_meidas = diff(media)) %>%
arrange(diferencia_meidas)
master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio"))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender)
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(map(data, ~describe(.)))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(map(data, ~PSYCH::describe(.)))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(map(data, ~psych::describe(.)))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, ~psych::describe(.)))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, function(x) lapply(x, function(y){y~gender, data = x})))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, function(x) lapply(x, function(y){y~gender, data = x})))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, function(x) lapply(x, function(y){t.test(y~gender, data = x}))))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, function(x) lapply(x, function(y){t.test(y~gender, data = x)})))
master %>%
lapply(x, function(y){t.test(y~gender, data = x)})
master %>%
lapply(., function(y){t.test(y~gender, data = .)})
master %>%
lapply(function(y){t.test(y~gender, data = .)})
master %>%
lapply(function(y){print(xd)})
master %>%
lapply(function(y){print(xd)})
master %>%
lapply(function(y){print("lol")})
master %>%
lapply(function(y){print(mean(y))})
master %>%
lapply(function(y){print(mean(y, na.rm =T))})
master %>%
map(function(y){print(mean(y, na.rm =T))})
master %>%
map(function(y){mean(y, na.rm =T)})
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender) %>%
mutate(xd = map(data, function(x) lapply(x, function(y){t.test(y~gender, data = x)}) %>%
as.data.frame))
master %>%
map(function(y){mean(y, na.rm =T)}) %>%
as.data.frame()
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
group_by(gender) %>%
summarise_all(t.test(gender~.))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
group_by(gender) %>%
summarise_all(function(x) t.test(gender~x, data = .))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
group_by(gender) %>%
summarise_all(function(x) t.test(gender~x, data = master))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
group_by(gender)
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
summarise_all(function(x) t.test(gender~x, data = master))
master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>%
summarise_all(function(x) t.test(x ~gender , data = .))
t_gender
t_gender <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map_df(function(x) t.test(x ~ gender, data = master %>% filter(!is.na(gender)))) %>%
t() %>% as.data.frame() %>%
mutate(varname = rownames(.)) %>%
select(varname, p_value = V1) %>%
filter(p_value < 0.05)
t_gender <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map_df(function(x) t.test(x ~ gender, data = master %>% filter(!is.na(gender)))) %>%
t() %>% as.data.frame() %>%
mutate(varname = rownames(.)) %>%
select(varname, p_value = V1) %>%
filter(p_value < 0.05)
t_gender <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
mutate(map_df(function(x) t.test(x ~ gender, data = master %>% filter(!is.na(gender)))))
t_gender <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
mutate(xd = map_df(function(x) t.test(x ~ gender, data = master %>% filter(!is.na(gender)))))
t_gender <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
mutate(xd = map_df(., function(x) t.test(x ~ gender, data = master %>% filter(!is.na(gender)))))
master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map_df(function(x) t.test(x ~ gender))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map_df(function(x) t.test(x ~ gender$master))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map_df(function(x) t.test(x ~ master$gender))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map(function(x) t.test(x ~ master$gender))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
mutate(xd = map(function(x) t.test(x ~ master$gender)))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
mutate(xd = broom::tidy(map(function(x) t.test(x ~ master$gender))))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map(function(x) t.test(x ~ master$gender))
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map(function(x) t.test(x ~ master$gender)) %>%
nest()
master %>%
select(contains("item"), contains("dimension"), contains("dominio")) %>%
map(function(x) t.test(x ~ master$gender)) %>%
broom::tidy()
iris %>%
filter(Species %in% c("setosa", "versicolor")) %>%
gather(variable, value, -Species) %>%
group_nest(Species, variable) %>%
crossing(., .) %>%
filter(Species == Species1,
variable != variable1) %>%
mutate(t_test = map2(data, data1, ~{t.test(.x$value, .y$value) %>% broom::tidy()})) %>%
unnest(t_test, .drop = TRUE)
iris %>%
filter(Species %in% c("setosa", "versicolor")) %>%
gather(variable, value, -Species) %>%
group_nest(Species, variable) %>%
crossing(., .) %>%
filter(Species == Species1,
variable != variable1) %>%
mutate(t_test = map2(data, data1, ~{t.test(.x$value, .y$value) %>% broom::tidy()})) %>%
unnest(t_test, .drop = TRUE)
iris %>%
filter(Species %in% c("setosa", "versicolor")) %>%
pivot_longer(cols = -Species, names_to = "variable", values_to = "value") %>%
group_nest(Species, variable, .key = "values") %>%
pivot_wider(names_from = Species, values_from = values) %>%
mutate(t_test = map2(setosa, versicolor, ~ tidy(t.test(.x$value, .y$value)))) %>%
unnest(t_test)
library(broom)
iris %>%
filter(Species %in% c("setosa", "versicolor")) %>%
pivot_longer(cols = -Species, names_to = "variable", values_to = "value") %>%
group_nest(Species, variable, .key = "values") %>%
pivot_wider(names_from = Species, values_from = values) %>%
mutate(t_test = map2(setosa, versicolor, ~ tidy(t.test(.x$value, .y$value)))) %>%
unnest(t_test)
iris %>%
filter(Species %in% c("setosa", "versicolor")) %>%
pivot_longer(cols = -Species, names_to = "variable", values_to = "value") %>%
group_nest(Species, variable, .key = "values") %>%
pivot_wider(names_from = Species, values_from = values)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% nest(-gender)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender) %>%
.[[2,1]]
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender) %>%
.[2,1]
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender) %>%
.[1,1]
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender) %>%
.[1,2]
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
nest(-gender) %>%
.[[1,2]]
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
pivot_longer(cols = -gender, names_to = varname, values_to = value)
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value")
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit() %>%
pivot_longer(cols = -gender, names_to = "varname", values_to = "value")
master %>%
select(gender, contains("item"), contains("dimension"), contains("dominio")) %>% na.omit()
t.test(master$`593_item_2399_item_cominacionorg_02` ~ master$gender)
t.test(master$`593_item_2399_item_cominacionorg_02` ~ master$gender) %>%
broom::tidy()
t.test(master[[2]] ~ master$gender) %>%
broom::tidy()
colnames(master[[2]])
colnames(master[2])
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio"))
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio"))
pre_t_test
lista_t_test <- c()
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(contains("item"), contains("dimension"), contains("dominio"))
for(i in length(pre_t_test)-1){
columna <- colnames(pre_t_test[i+1])
lista_t_test [[i]]<- t.test(pre_t_test[[i+1]] ~ master$gender) %>%
broom::tidy()
}
for(i in length(pre_t_test)-1){
columna <- colnames(pre_t_test[i+1])
lista_t_test [[i]]<- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy()
}
pre_t_test
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender. contains("item"), contains("dimension"), contains("dominio"))
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
lista_t_test <- c()
for(i in length(pre_t_test)-1){
columna <- colnames(pre_t_test[i+1])
lista_t_test [[i]]<- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy()
}
lista_t_test %>%
do.call("rbind", .)
lista_t_test
pre_t_test
lista_t_test
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
lista_t_test <- c()
for(i in length(pre_t_test)-1){
columna <- colnames(pre_t_test[i+1])
lista_t_test[[i]] <- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy()
}
lista_t_test %>%
do.call("rbind", .)
lista_t_test %>%
do.call("rbind", .)
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
lista_t_test <- c()
for(i in 1:length(pre_t_test)-1){
columna <- colnames(pre_t_test[i+1])
lista_t_test[[i]] <- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy()
}
1:length(pre_t_test)-1
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
lista_t_test <- c()
for(i in 1:(length(pre_t_test)-1)){
columna <- colnames(pre_t_test[i+1])
lista_t_test[[i]] <- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy()
}
lista_t_test %>%
do.call("rbind", .)
pre_t_test <- master %>%
filter(!is.na(gender)) %>%
select(gender, contains("item"), contains("dimension"), contains("dominio"))
lista_t_test <- c()
for(i in 1:(length(pre_t_test)-1)){
columna <- colnames(pre_t_test[i+1])
lista_t_test[[i]] <- t.test(pre_t_test[[i+1]] ~ pre_t_test$gender) %>%
broom::tidy() %>%
mutate(varname = columna) %>%
select(varname, everything())
}
lista_t_test %>%
do.call("rbind", .)
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate))
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate)) %>%
arrange(-abs)
diccionario_item
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate)) %>%
arrange(-abs) %>%
mutate(expss::vlookup(varname, diccionario_item, lookup_column = 1, result_column = 2))
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate)) %>%
arrange(-abs) %>%
mutate(detalle = expss::vlookup(varname, diccionario_item, lookup_column = 1, result_column = 2)) %>%
select(detalle, everything())
diccionario_item
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate)) %>%
arrange(-abs) %>%
mutate(detalle = expss::vlookup(varname, diccionario_item, lookup_column = 2, result_column = 1)) %>%
select(detalle, everything())
lista_t_test
lista_t_test %>%
do.call("rbind", .) %>%
mutate(abs = abs(estimate)) %>%
arrange(-abs) %>%
mutate(detalle = expss::vlookup(varname, diccionario_item, lookup_column = 2, result_column = 1)) %>%
select(detalle, everything())
knitr::opts_chunk$set(echo = TRUE)
read.delim("X11_clipboard")
read.delim("clipboard")
read.clipboard()
readClipboard()
overflow::readClip
overflow::readClip()
install.packages("overflow")
read.delim("clipr")
install.packages("clipr")
clipr::read_clip()
!require("clipr", character.only = TRUE)
!require("megalodon", character.only = TRUE)
!require("clipr", character.only = TRUE)
clipr::read_clip()
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("matifuentes2/PArankmi")
devtools::install_github("matifuentes2/PArankmi")
devtools::install_github("matifuentes2/PArankmi")
PArankmi::backslasher()
PArankmi::backslasher()
backslasher <- function(){
if(!require("clipr", character.only = TRUE)){
install.packages("clipr")
}
x <- clipr::read_clip()
y <- gsub("\\\\", "/", x)
write_clip(y)
return(y)
}
write_clip(y)
backslasher()
getwd()
here::here()
setwd(here::here())
>>>>>>> e64f69a5967b16957d7b32a3508cc347ed09e889
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
PArankmi::trash_surveys(var = "s.title",query = F)
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
PArankmi::trash_surveys(var = "s.title",query = F)
PArankmi::trash_surveys(var = "s.title",query = T)
if(query == F){
output <- sort(enterprises)}
enterprises <- c("Acme Corp", "Avengers","CompuMundo Hiper Mega Red", "Wayne Enterprises","Empresa de prueba", "EmpresaPrueba", "Empresa test", "Enaex DEMO", "Stark Industries", "Customer Success Demos", "Llevepan","BBVAdemo","BCP Demo","Clientes Rankmi","Co op","Empresas ACME", "Fortuna Silver Mines", "Fortuna Silver Mines 2","Manuelita", "Only app", "prueba", "Red", "Rankmi Test", "Sales Manager","test creacion","Test intercom 1","test org chart","tyrell","Tyrell Corp.")
paste(enterprises, collapse = ",")
paste(enterprises, collapse = "','")
paste("'",paste(enterprises, collapse = "','"),"'")
str_c("'",paste(enterprises, collapse = "','"),"'")
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
# devtools::install_git("https://github.com/matifuentes2/PArankmi")
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
setwd(here::here())
devtools::document()
setwd("..")
devtools::install("PArankmi")
devtools::install_git("https://github.com/matifuentes2/PArankmi")
